// SPDX-License-Identifier: AGPL-3.0

pragma solidity ^0.8.12;
pragma experimental ABIEncoderV2;

// These are the core Yearn libraries
import {BaseStrategy, StrategyParams} from "@yearnvaults/contracts/BaseStrategy.sol";

import {Address} from "@openzeppelin/contracts/utils/Address.sol";
import {IERC20} from "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import {SafeERC20} from "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";

// Import interfaces for many popular DeFi projects, or add your own!
//import "./interfaces/<protocol>/<Interface>.sol";


/// @title BasicYearnCompoundDAIStrategy
/// @notice First strategy tutorial for Scaffold-ETH inspired by @charlesndalton's session in September: https://www.youtube.com/watch?v=z48R7dhAGP4&ab_channel=ETHGlobal && was built off of the foundrymix by @storming0x
/// @author <insert your name here!>
contract Strategy is BaseStrategy {
    using SafeERC20 for IERC20;
    using Address for address;

    constructor(address _vault) BaseStrategy(_vault) {
    }

    /// @notice names the strategy
    /// @return name of the strategy
    /// @dev defined in implementation, called by constructor    
    function name() external view override returns (string memory) {
        // Add your own name here, suggestion e.g. "StrategyCreamYFI"
        return "Strategy<ProtocolName><TokenType>";
    }

    /// @notice calculates an estimated total of wantToken within strategy contract && deployed in strategy itself
    /// @return estimated total wantToken (including converted assets)
    function estimatedTotalAssets() public view override returns (uint256) {
        // TODO: Build a more accurate estimate using the value of all positions in terms of `want`
        return want.balanceOf(address(this));
    }


    /// @notice prepares return and reporting the accounting losses and gains from the last time harvest() has been called. 
    /// @param _debtOutstanding amount of wantToken vault wants at a specific function call
    /// @dev Part of Harvest "flow" - bot calls harvest() it calls this function && adjustPosition(). You're preparing the return of the DAI, liquidiating anything you can to get that amount back to the vault.
    /// @return _profit amount since last harvest, if any
    /// @return _loss amount since last harvest, if any
    /// @return _debtPayment payable during this harvest() call
    function prepareReturn(uint256 _debtOutstanding)
        internal
        override
        returns (
            uint256 _profit,
            uint256 _loss,
            uint256 _debtPayment
        )
    {
        // TODO: Do stuff here to free up any returns back into `want`
        // NOTE: Return `_profit` which is value generated by all positions, priced in `want`
        // NOTE: Should try to free up at least `_debtOutstanding` of underlying position
    }

    /// @notice invests excess wantToken into the strategy
    /// @dev Part of harvest "flow" - bot calls harvest(), it calls this function && prepareReturn()
    function adjustPosition(uint256 _debtOutstanding) internal override {
        // TODO: Do something to invest excess `want` tokens (from the Vault) into your positions
        // NOTE: Try to adjust positions so that `_debtOutstanding` can be freed up on *next* harvest (not immediately)
    }

    /// @notice part of vault.withdraw() flow where strategy liquidates as much as possible, if not enough then declare losses.
    /// @dev user calls withdraws from vault, calling withdraw on the strategy which then calls this function
    /// @param _amountNeeded total wantToken required from liquidating active strategy positions
    /// @return _liquidatedAmount of wantToken during this call
    /// @return _loss of wantToken during this call
    function liquidatePosition(uint256 _amountNeeded)
        internal
        override
        returns (uint256 _liquidatedAmount, uint256 _loss)
    {
        // TODO: Do stuff here to free up to `_amountNeeded` from all positions back into `want`
        // NOTE: Maintain invariant `want.balanceOf(this) >= _liquidatedAmount`
        // NOTE: Maintain invariant `_liquidatedAmount + _loss <= _amountNeeded`

        uint256 totalAssets = want.balanceOf(address(this));
        if (_amountNeeded > totalAssets) {
            _liquidatedAmount = totalAssets;
            unchecked {
                _loss = _amountNeeded - totalAssets;
            }
        } else {
            _liquidatedAmount = _amountNeeded;
        }
    }

    /// @notice liquidate all strategy positions to obtain wantToken
    /// @return total wantToken balance after all positions liquidated
    function liquidateAllPositions() internal override returns (uint256) {
        // TODO: Liquidate all positions and return the amount freed.
        return want.balanceOf(address(this));
    }
    
    /// @notice transfer any non-want tokens to a new strategy, if you change the strategy code and deploy a new one.
    /// @dev can override `tendTrigger` and `harvestTrigger` if necessary
    function prepareMigration(address _newStrategy) internal override {
        // TODO: Transfer any non-`want` tokens to the new strategy
        // NOTE: `migrate` will automatically forward all `want` in this strategy to the new one
    }

    // *********** IGNORE BELOW FOR TUTORIAL *********** //

    // Override this to add all tokens/tokenized positions this contract manages
    // on a *persistent* basis (e.g. not just for swapping back to want ephemerally)
    // NOTE: Do *not* include `want`, already included in `sweep` below
    //
    // Example:
    //
    //    function protectedTokens() internal override view returns (address[] memory) {
    //      address[] memory protected = new address[](3);
    //      protected[0] = tokenA;
    //      protected[1] = tokenB;
    //      protected[2] = tokenC;
    //      return protected;
    //    }
    function protectedTokens()
        internal
        view
        override
        returns (address[] memory)
    // solhint-disable-next-line no-empty-blocks
    {

    }

    /**
     * @notice
     *  Provide an accurate conversion from `_amtInWei` (denominated in wei)
     *  to `want` (using the native decimal characteristics of `want`).
     * @dev
     *  Care must be taken when working with decimals to assure that the conversion
     *  is compatible. As an example:
     *
     *      given 1e17 wei (0.1 ETH) as input, and want is USDC (6 decimals),
     *      with USDC/ETH = 1800, this should give back 1800000000 (180 USDC)
     *
     * @param _amtInWei The amount (in wei/1e-18 ETH) to convert to `want`
     * @return The amount in `want` of `_amtInEth` converted to `want`
     **/
    function ethToWant(uint256 _amtInWei)
        public
        view
        virtual
        override
        returns (uint256)
    {
        // TODO create an accurate price oracle
        return _amtInWei;
    }
}